package hangman;

/**
* The Array implementation of the GameModel interface.
*/
public class ArrayGameModel implements GameModel {

    /** The acceptable characters. */
    private static final String ALPHABET="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    /** hung state */
    private int state=0;
    /**
        * Creates a new ArrayGameModel object.
        * 
        * guessWord the word to guess
        */
    char[] wordToGuess;
    int numGuess=0;
    char[] guesses= new char[ALPHABET.length()];
    char[] guessBlank;
    String word;
    public ArrayGameModel(String guessWord) {
        // TODO (1)
    	word=guessWord;
    	wordToGuess=new char[guessWord.length()];
    	guessBlank=new char[guessWord.length()];
    	for(int s = 0; s<guessBlank.length;s++){
    		guessBlank[s]='_';
    	}
    	for(int i=0; i<guessWord.length(); i++){
    	wordToGuess[i]=guessWord.charAt(i);
    	}
    }

    public boolean isPriorGuess(char guess) {
        // TODO (2)
        boolean prior= false;
        for(int y = 0; y<guesses.length; y++){
        	if(guesses[y]==guess){
        		prior = true;
        		break;
        	}
        }
        return prior;
    }

    public int numberOfGuesses() {
        // TODO (3)
        return numGuess;
    }

    public boolean isCorrectGuess(char guess) {
        // TODO (4)
    	boolean correct=false;
    	if (isPriorGuess(guess)==true){
        return false;
    	}
    	else{
    		for(int b =0; b<wordToGuess.length;b++){
    			if(guess==wordToGuess[b]){
    				correct = true;	
    			}
    		}
    		return correct;
    	}
    }



    public boolean doMove(char guess) {
        // TODO (5)
    	if(isCorrectGuess(guess)==false&&isPriorGuess(guess)==true){
    		return false;
    	}
    	else if(isCorrectGuess(guess)==false&&isPriorGuess(guess)==false){
    		state++;
    		guesses[numGuess]=guess;
    		numGuess++;
    		return false;
    	}

    	else{
    		guesses[numGuess]= guess;
    		numGuess++;
    		for(int x=0; x<guessBlank.length; x++){
    			if(guess==wordToGuess[x]){
    				guessBlank[x]=guess;
    			}
    		}
    		return true;
    	}
    }

    public boolean inWinningState() {
        // TODO (6)
    	boolean win = true;
    	for(int z=0; z<wordToGuess.length;z++){
    		if(guessBlank[z]!=wordToGuess[z]){
    			win = false;
    			break;
    		}
    	}
    	return win;
    }

    public boolean inLosingState() {
        // TODO (7)
    	if(state==10){
    		return true;
    	}
    	else{
    		return false;
    	}
    }

    public String toString() {
        // TODO (8)
    	String blank= "";
    	int num=0;
    	for( int f =0; f<guessBlank.length-1;f++){
    		blank= blank+guessBlank[f]+ " ";
    		 num = f;
    	}
    	num++;
    	blank= blank+guessBlank[num];
        return blank;
    }

    public String previousGuessString() {
        // TODO (9)
    	int count = 0;
    	String all= "[";
    	while(guesses[count]!= '\0'){
    		all= all+guesses[count]+","+" ";
    		count++;
    	}
    	String allGuess= all.substring(0,all.length()-2);
    	allGuess = allGuess+"]";
    	return allGuess;
    }

    public int getState() {
        return state;
    }
    

    public String getWord() {
        // TODO (10)

        return word;
    }
}
